$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 _ clk $end
  $var wire 32 a r[0] [31:0] $end
  $var wire 32 k r[10] [31:0] $end
  $var wire 32 l r[11] [31:0] $end
  $var wire 32 m r[12] [31:0] $end
  $var wire 32 n r[13] [31:0] $end
  $var wire 32 o r[14] [31:0] $end
  $var wire 32 p r[15] [31:0] $end
  $var wire 32 q r[16] [31:0] $end
  $var wire 32 r r[17] [31:0] $end
  $var wire 32 s r[18] [31:0] $end
  $var wire 32 t r[19] [31:0] $end
  $var wire 32 b r[1] [31:0] $end
  $var wire 32 u r[20] [31:0] $end
  $var wire 32 v r[21] [31:0] $end
  $var wire 32 w r[22] [31:0] $end
  $var wire 32 x r[23] [31:0] $end
  $var wire 32 y r[24] [31:0] $end
  $var wire 32 z r[25] [31:0] $end
  $var wire 32 { r[26] [31:0] $end
  $var wire 32 | r[27] [31:0] $end
  $var wire 32 } r[28] [31:0] $end
  $var wire 32 ~ r[29] [31:0] $end
  $var wire 32 c r[2] [31:0] $end
  $var wire 32 !! r[30] [31:0] $end
  $var wire 32 "! r[31] [31:0] $end
  $var wire 32 d r[3] [31:0] $end
  $var wire 32 e r[4] [31:0] $end
  $var wire 32 f r[5] [31:0] $end
  $var wire 32 g r[6] [31:0] $end
  $var wire 32 h r[7] [31:0] $end
  $var wire 32 i r[8] [31:0] $end
  $var wire 32 j r[9] [31:0] $end
  $var wire  1 ` start $end
  $scope module SingleCycleCPU $end
   $var wire  4 Q ALUCtl [3:0] $end
   $var wire  2 O ALUOp [1:0] $end
   $var wire 32 ^ ALUOut [31:0] $end
   $var wire  4 F BranchCtl [3:0] $end
   $var wire  1 #! BranchOut $end
   $var wire 32 $! WriteData_mux1_out [31:0] $end
   $var wire 32 %! WriteData_mux2_out [31:0] $end
   $var wire 32 \ alu_mux1_out [31:0] $end
   $var wire 32 ] alu_mux2_out [31:0] $end
   $var wire  1 L branch $end
   $var wire  1 _ clk $end
   $var wire 32 P imm [31:0] $end
   $var wire  1 G immUse $end
   $var wire 32 E instruction [31:0] $end
   $var wire  1 M jump $end
   $var wire  1 J memRead $end
   $var wire  1 K memWrite $end
   $var wire  1 H memtoReg $end
   $var wire  1 N pcUse $end
   $var wire 32 D pc_add4 [31:0] $end
   $var wire 32 Y pc_mux_out [31:0] $end
   $var wire 32 C pc_o [31:0] $end
   $var wire 32 a r[0] [31:0] $end
   $var wire 32 k r[10] [31:0] $end
   $var wire 32 l r[11] [31:0] $end
   $var wire 32 m r[12] [31:0] $end
   $var wire 32 n r[13] [31:0] $end
   $var wire 32 o r[14] [31:0] $end
   $var wire 32 p r[15] [31:0] $end
   $var wire 32 q r[16] [31:0] $end
   $var wire 32 r r[17] [31:0] $end
   $var wire 32 s r[18] [31:0] $end
   $var wire 32 t r[19] [31:0] $end
   $var wire 32 b r[1] [31:0] $end
   $var wire 32 u r[20] [31:0] $end
   $var wire 32 v r[21] [31:0] $end
   $var wire 32 w r[22] [31:0] $end
   $var wire 32 x r[23] [31:0] $end
   $var wire 32 y r[24] [31:0] $end
   $var wire 32 z r[25] [31:0] $end
   $var wire 32 { r[26] [31:0] $end
   $var wire 32 | r[27] [31:0] $end
   $var wire 32 } r[28] [31:0] $end
   $var wire 32 ~ r[29] [31:0] $end
   $var wire 32 c r[2] [31:0] $end
   $var wire 32 !! r[30] [31:0] $end
   $var wire 32 "! r[31] [31:0] $end
   $var wire 32 d r[3] [31:0] $end
   $var wire 32 e r[4] [31:0] $end
   $var wire 32 f r[5] [31:0] $end
   $var wire 32 g r[6] [31:0] $end
   $var wire 32 h r[7] [31:0] $end
   $var wire 32 i r[8] [31:0] $end
   $var wire 32 j r[9] [31:0] $end
   $var wire 32 Z readData1 [31:0] $end
   $var wire 32 [ readData2 [31:0] $end
   $var wire 32 &! readData3 [31:0] $end
   $var wire  1 I regWrite $end
   $var wire  1 ` start $end
   $scope module m_ALU $end
    $var wire 32 \ A [31:0] $end
    $var wire  4 Q ALUCtl [3:0] $end
    $var wire 32 ^ ALUOut [31:0] $end
    $var wire 32 ] B [31:0] $end
   $upscope $end
   $scope module m_ALU_Branch_Ctrl $end
    $var wire  4 Q ALUCtl [3:0] $end
    $var wire  2 O ALUOp [1:0] $end
    $var wire  4 F BranchCtl [3:0] $end
    $var wire  3 S funct3 [2:0] $end
    $var wire  1 R funct7 $end
   $upscope $end
   $scope module m_Adder_1 $end
    $var wire 32 C a [31:0] $end
    $var wire 32 (! b [31:0] $end
    $var wire 32 D sum [31:0] $end
   $upscope $end
   $scope module m_BranchComp $end
    $var wire 32 Z A [31:0] $end
    $var wire 32 [ B [31:0] $end
    $var wire  4 F BranchCtl [3:0] $end
    $var wire  1 #! BranchOut $end
   $upscope $end
   $scope module m_Control $end
    $var wire  2 O ALUOp [1:0] $end
    $var wire  1 L branch $end
    $var wire  8 U control [7:0] $end
    $var wire  1 G immUse $end
    $var wire  1 M jump $end
    $var wire  1 J memRead $end
    $var wire  1 K memWrite $end
    $var wire  1 H memtoReg $end
    $var wire  7 T opcode [6:0] $end
    $var wire  1 N pcUse $end
    $var wire  1 I regWrite $end
   $upscope $end
   $scope module m_DataMemory $end
    $var wire 32 ^ address [31:0] $end
    $var wire  1 _ clk $end
    $var wire  1 J memRead $end
    $var wire  1 K memWrite $end
    $var wire 32 &! readData [31:0] $end
    $var wire  1 ` rst $end
    $var wire 32 [ writeData [31:0] $end
   $upscope $end
   $scope module m_ImmGen $end
    $var wire 32 P imm [31:0] $end
    $var wire 32 E inst [31:0] $end
    $var wire  7 T opcode [6:0] $end
   $upscope $end
   $scope module m_InstMem $end
    $var wire 32 E inst [31:0] $end
    $var wire 32 C readAddr [31:0] $end
   $upscope $end
   $scope module m_Mux1_ALU $end
    $var wire 32 \ out [31:0] $end
    $var wire 32 Z s0 [31:0] $end
    $var wire 32 C s1 [31:0] $end
    $var wire  1 N sel $end
    $var wire 32 )! size [31:0] $end
   $upscope $end
   $scope module m_Mux1_WriteData $end
    $var wire 32 $! out [31:0] $end
    $var wire 32 ^ s0 [31:0] $end
    $var wire 32 &! s1 [31:0] $end
    $var wire  1 H sel $end
    $var wire 32 )! size [31:0] $end
   $upscope $end
   $scope module m_Mux2_ALU $end
    $var wire 32 ] out [31:0] $end
    $var wire 32 [ s0 [31:0] $end
    $var wire 32 P s1 [31:0] $end
    $var wire  1 G sel $end
    $var wire 32 )! size [31:0] $end
   $upscope $end
   $scope module m_Mux2_WriteData $end
    $var wire 32 %! out [31:0] $end
    $var wire 32 $! s0 [31:0] $end
    $var wire 32 D s1 [31:0] $end
    $var wire  1 M sel $end
    $var wire 32 )! size [31:0] $end
   $upscope $end
   $scope module m_Mux_PC $end
    $var wire 32 Y out [31:0] $end
    $var wire 32 D s0 [31:0] $end
    $var wire 32 ^ s1 [31:0] $end
    $var wire  1 '! sel $end
    $var wire 32 )! size [31:0] $end
   $upscope $end
   $scope module m_PC $end
    $var wire  1 _ clk $end
    $var wire 32 Y pc_i [31:0] $end
    $var wire 32 C pc_o [31:0] $end
    $var wire  1 ` rst $end
   $upscope $end
   $scope module m_Register $end
    $var wire  1 _ clk $end
    $var wire 32 Z readData1 [31:0] $end
    $var wire 32 [ readData2 [31:0] $end
    $var wire  5 V readReg1 [4:0] $end
    $var wire  5 W readReg2 [4:0] $end
    $var wire  1 I regWrite $end
    $var wire 32 # regs[0] [31:0] $end
    $var wire 32 - regs[10] [31:0] $end
    $var wire 32 . regs[11] [31:0] $end
    $var wire 32 / regs[12] [31:0] $end
    $var wire 32 0 regs[13] [31:0] $end
    $var wire 32 1 regs[14] [31:0] $end
    $var wire 32 2 regs[15] [31:0] $end
    $var wire 32 3 regs[16] [31:0] $end
    $var wire 32 4 regs[17] [31:0] $end
    $var wire 32 5 regs[18] [31:0] $end
    $var wire 32 6 regs[19] [31:0] $end
    $var wire 32 $ regs[1] [31:0] $end
    $var wire 32 7 regs[20] [31:0] $end
    $var wire 32 8 regs[21] [31:0] $end
    $var wire 32 9 regs[22] [31:0] $end
    $var wire 32 : regs[23] [31:0] $end
    $var wire 32 ; regs[24] [31:0] $end
    $var wire 32 < regs[25] [31:0] $end
    $var wire 32 = regs[26] [31:0] $end
    $var wire 32 > regs[27] [31:0] $end
    $var wire 32 ? regs[28] [31:0] $end
    $var wire 32 @ regs[29] [31:0] $end
    $var wire 32 % regs[2] [31:0] $end
    $var wire 32 A regs[30] [31:0] $end
    $var wire 32 B regs[31] [31:0] $end
    $var wire 32 & regs[3] [31:0] $end
    $var wire 32 ' regs[4] [31:0] $end
    $var wire 32 ( regs[5] [31:0] $end
    $var wire 32 ) regs[6] [31:0] $end
    $var wire 32 * regs[7] [31:0] $end
    $var wire 32 + regs[8] [31:0] $end
    $var wire 32 , regs[9] [31:0] $end
    $var wire  1 ` rst $end
    $var wire 32 %! writeData [31:0] $end
    $var wire  5 X writeReg [4:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000100 D
b00000110010000000000010100010011 E
b1100 F
1G
0H
1I
0J
0K
0L
0M
0N
b11 O
b00000000000000000000000001100100 P
b0010 Q
0R
b000 S
b0010011 T
b10100000 U
b00000 V
b00100 W
b01010 X
b00000000000000000000000000000100 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000001100100 ]
b00000000000000000000000001100100 ^
0_
1`
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
1#!
b00000000000000000000000001100100 $!
b00000000000000000000000001100100 %!
b00000000000000000000000000000000 &!
0'!
b00000000000000000000000000000100 (!
b00000000000000000000000000100000 )!
#1
b00000000000000000000000010000000 %
b00000000000000000000000000000100 C
b00000000000000000000000000001000 D
b11110011100101010000010110010011 E
b11111111111111111111111100111001 P
1R
b01010 V
b11001 W
b01011 X
b00000000000000000000000000001000 Y
b11111111111111111111111100111001 ]
b11111111111111111111111100111001 ^
1_
0`
b00000000000000000000000010000000 c
b11111111111111111111111100111001 $!
b11111111111111111111111100111001 %!
#2
b11111111111111111111111100111001 .
0_
1`
b11111111111111111111111100111001 l
#3
b00000000000000000000000000000000 C
b00000000000000000000000000000100 D
b00000110010000000000010100010011 E
b00000000000000000000000001100100 P
0R
b00000 V
b00100 W
b01010 X
b00000000000000000000000000000100 Y
b00000000000000000000000001100100 ]
b00000000000000000000000001100100 ^
1_
b00000000000000000000000001100100 $!
b00000000000000000000000001100100 %!
#4
b00000000000000000000000001100100 -
0_
b00000000000000000000000001100100 k
#5
1_
#6
0_
#7
1_
#8
0_
#9
1_
#10
0_
#11
1_
#12
0_
#13
1_
#14
0_
#15
1_
#16
0_
#17
1_
#18
0_
#19
1_
#20
0_
#21
1_
#22
0_
#23
1_
#24
0_
#25
1_
#26
0_
#27
1_
#28
0_
#29
1_
#30
0_
#31
1_
#32
0_
#33
1_
#34
0_
#35
1_
#36
0_
#37
1_
#38
0_
#39
1_
#40
0_
#41
1_
#42
0_
#43
1_
#44
0_
#45
1_
#46
0_
#47
1_
#48
0_
#49
1_
#50
0_
#51
1_
#52
0_
#53
1_
#54
0_
#55
1_
#56
0_
#57
1_
#58
0_
#59
1_
#60
0_
#61
1_
#62
0_
#63
1_
#64
0_
#65
1_
#66
0_
#67
1_
#68
0_
#69
1_
#70
0_
#71
1_
#72
0_
#73
1_
#74
0_
#75
1_
#76
0_
#77
1_
#78
0_
#79
1_
#80
0_
#81
1_
#82
0_
#83
1_
#84
0_
#85
1_
#86
0_
#87
1_
#88
0_
#89
1_
#90
0_
#91
1_
#92
0_
#93
1_
#94
0_
#95
1_
#96
0_
#97
1_
#98
0_
#99
1_
#100
0_
#101
1_
#102
0_
#103
1_
#104
