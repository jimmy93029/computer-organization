$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 ] clk $end
  $var wire 32 _ r[0] [31:0] $end
  $var wire 32 i r[10] [31:0] $end
  $var wire 32 j r[11] [31:0] $end
  $var wire 32 k r[12] [31:0] $end
  $var wire 32 l r[13] [31:0] $end
  $var wire 32 m r[14] [31:0] $end
  $var wire 32 n r[15] [31:0] $end
  $var wire 32 o r[16] [31:0] $end
  $var wire 32 p r[17] [31:0] $end
  $var wire 32 q r[18] [31:0] $end
  $var wire 32 r r[19] [31:0] $end
  $var wire 32 ` r[1] [31:0] $end
  $var wire 32 s r[20] [31:0] $end
  $var wire 32 t r[21] [31:0] $end
  $var wire 32 u r[22] [31:0] $end
  $var wire 32 v r[23] [31:0] $end
  $var wire 32 w r[24] [31:0] $end
  $var wire 32 x r[25] [31:0] $end
  $var wire 32 y r[26] [31:0] $end
  $var wire 32 z r[27] [31:0] $end
  $var wire 32 { r[28] [31:0] $end
  $var wire 32 | r[29] [31:0] $end
  $var wire 32 a r[2] [31:0] $end
  $var wire 32 } r[30] [31:0] $end
  $var wire 32 ~ r[31] [31:0] $end
  $var wire 32 b r[3] [31:0] $end
  $var wire 32 c r[4] [31:0] $end
  $var wire 32 d r[5] [31:0] $end
  $var wire 32 e r[6] [31:0] $end
  $var wire 32 f r[7] [31:0] $end
  $var wire 32 g r[8] [31:0] $end
  $var wire 32 h r[9] [31:0] $end
  $var wire  1 ^ start $end
  $scope module SingleCycleCPU $end
   $var wire  2 N ALUOp [1:0] $end
   $var wire 32 [ ALUOut [31:0] $end
   $var wire  1 L ALUSrc $end
   $var wire 32 #! ReadData3 [31:0] $end
   $var wire 32 "! WriteData_mux_out [31:0] $end
   $var wire 32 G add2_sum [31:0] $end
   $var wire 32 Z alu_mux_out [31:0] $end
   $var wire  4 P aluctl [3:0] $end
   $var wire  1 H branch $end
   $var wire  1 ] clk $end
   $var wire 32 O imm [31:0] $end
   $var wire 32 E instruction [31:0] $end
   $var wire  1 I memRead $end
   $var wire  1 K memWrite $end
   $var wire  1 J memtoReg $end
   $var wire 32 D pc_add [31:0] $end
   $var wire 32 !! pc_mux_out [31:0] $end
   $var wire 32 C pc_o [31:0] $end
   $var wire 32 _ r[0] [31:0] $end
   $var wire 32 i r[10] [31:0] $end
   $var wire 32 j r[11] [31:0] $end
   $var wire 32 k r[12] [31:0] $end
   $var wire 32 l r[13] [31:0] $end
   $var wire 32 m r[14] [31:0] $end
   $var wire 32 n r[15] [31:0] $end
   $var wire 32 o r[16] [31:0] $end
   $var wire 32 p r[17] [31:0] $end
   $var wire 32 q r[18] [31:0] $end
   $var wire 32 r r[19] [31:0] $end
   $var wire 32 ` r[1] [31:0] $end
   $var wire 32 s r[20] [31:0] $end
   $var wire 32 t r[21] [31:0] $end
   $var wire 32 u r[22] [31:0] $end
   $var wire 32 v r[23] [31:0] $end
   $var wire 32 w r[24] [31:0] $end
   $var wire 32 x r[25] [31:0] $end
   $var wire 32 y r[26] [31:0] $end
   $var wire 32 z r[27] [31:0] $end
   $var wire 32 { r[28] [31:0] $end
   $var wire 32 | r[29] [31:0] $end
   $var wire 32 a r[2] [31:0] $end
   $var wire 32 } r[30] [31:0] $end
   $var wire 32 ~ r[31] [31:0] $end
   $var wire 32 b r[3] [31:0] $end
   $var wire 32 c r[4] [31:0] $end
   $var wire 32 d r[5] [31:0] $end
   $var wire 32 e r[6] [31:0] $end
   $var wire 32 f r[7] [31:0] $end
   $var wire 32 g r[8] [31:0] $end
   $var wire 32 h r[9] [31:0] $end
   $var wire 32 X readData1 [31:0] $end
   $var wire 32 Y readData2 [31:0] $end
   $var wire  1 M regWrite $end
   $var wire 32 F shift1_out [31:0] $end
   $var wire  1 ^ start $end
   $var wire  1 \ zero_ $end
   $scope module m_ALU $end
    $var wire 32 X A [31:0] $end
    $var wire 32 [ ALUOut [31:0] $end
    $var wire  4 P ALUctl [3:0] $end
    $var wire 32 Z B [31:0] $end
    $var wire  1 \ zero $end
   $upscope $end
   $scope module m_ALUCtrl $end
    $var wire  4 P ALUCtl [3:0] $end
    $var wire  2 N ALUOp [1:0] $end
    $var wire  3 R funct3 [2:0] $end
    $var wire  1 Q funct7 $end
   $upscope $end
   $scope module m_Adder_1 $end
    $var wire 32 C a [31:0] $end
    $var wire 32 %! b [31:0] $end
    $var wire 32 D sum [31:0] $end
   $upscope $end
   $scope module m_Adder_2 $end
    $var wire 32 C a [31:0] $end
    $var wire 32 F b [31:0] $end
    $var wire 32 G sum [31:0] $end
   $upscope $end
   $scope module m_Control $end
    $var wire  2 N ALUOp [1:0] $end
    $var wire  1 L ALUSrc $end
    $var wire  1 H branch $end
    $var wire  6 T control [5:0] $end
    $var wire  1 I memRead $end
    $var wire  1 K memWrite $end
    $var wire  1 J memtoReg $end
    $var wire  7 S opcode [6:0] $end
    $var wire  1 M regWrite $end
   $upscope $end
   $scope module m_DataMemory $end
    $var wire 32 [ address [31:0] $end
    $var wire  1 ] clk $end
    $var wire  1 I memRead $end
    $var wire  1 K memWrite $end
    $var wire 32 #! readData [31:0] $end
    $var wire  1 ^ rst $end
    $var wire 32 Y writeData [31:0] $end
   $upscope $end
   $scope module m_ImmGen $end
    $var wire 32 O imm [31:0] $end
    $var wire 32 E inst [31:0] $end
    $var wire  7 S opcode [6:0] $end
   $upscope $end
   $scope module m_InstMem $end
    $var wire 32 E inst [31:0] $end
    $var wire 32 C readAddr [31:0] $end
   $upscope $end
   $scope module m_Mux_ALU $end
    $var wire 32 Z out [31:0] $end
    $var wire 32 Y s0 [31:0] $end
    $var wire 32 O s1 [31:0] $end
    $var wire  1 L sel $end
    $var wire 32 &! size [31:0] $end
   $upscope $end
   $scope module m_Mux_PC $end
    $var wire 32 !! out [31:0] $end
    $var wire 32 D s0 [31:0] $end
    $var wire 32 G s1 [31:0] $end
    $var wire  1 $! sel $end
    $var wire 32 &! size [31:0] $end
   $upscope $end
   $scope module m_Mux_WriteData $end
    $var wire 32 "! out [31:0] $end
    $var wire 32 #! s0 [31:0] $end
    $var wire 32 [ s1 [31:0] $end
    $var wire  1 J sel $end
    $var wire 32 &! size [31:0] $end
   $upscope $end
   $scope module m_PC $end
    $var wire  1 ] clk $end
    $var wire 32 !! pc_i [31:0] $end
    $var wire 32 C pc_o [31:0] $end
    $var wire  1 ^ rst $end
   $upscope $end
   $scope module m_Register $end
    $var wire  1 ] clk $end
    $var wire 32 X readData1 [31:0] $end
    $var wire 32 Y readData2 [31:0] $end
    $var wire  5 U readReg1 [4:0] $end
    $var wire  5 V readReg2 [4:0] $end
    $var wire  1 M regWrite $end
    $var wire 32 # regs[0] [31:0] $end
    $var wire 32 - regs[10] [31:0] $end
    $var wire 32 . regs[11] [31:0] $end
    $var wire 32 / regs[12] [31:0] $end
    $var wire 32 0 regs[13] [31:0] $end
    $var wire 32 1 regs[14] [31:0] $end
    $var wire 32 2 regs[15] [31:0] $end
    $var wire 32 3 regs[16] [31:0] $end
    $var wire 32 4 regs[17] [31:0] $end
    $var wire 32 5 regs[18] [31:0] $end
    $var wire 32 6 regs[19] [31:0] $end
    $var wire 32 $ regs[1] [31:0] $end
    $var wire 32 7 regs[20] [31:0] $end
    $var wire 32 8 regs[21] [31:0] $end
    $var wire 32 9 regs[22] [31:0] $end
    $var wire 32 : regs[23] [31:0] $end
    $var wire 32 ; regs[24] [31:0] $end
    $var wire 32 < regs[25] [31:0] $end
    $var wire 32 = regs[26] [31:0] $end
    $var wire 32 > regs[27] [31:0] $end
    $var wire 32 ? regs[28] [31:0] $end
    $var wire 32 @ regs[29] [31:0] $end
    $var wire 32 % regs[2] [31:0] $end
    $var wire 32 A regs[30] [31:0] $end
    $var wire 32 B regs[31] [31:0] $end
    $var wire 32 & regs[3] [31:0] $end
    $var wire 32 ' regs[4] [31:0] $end
    $var wire 32 ( regs[5] [31:0] $end
    $var wire 32 ) regs[6] [31:0] $end
    $var wire 32 * regs[7] [31:0] $end
    $var wire 32 + regs[8] [31:0] $end
    $var wire 32 , regs[9] [31:0] $end
    $var wire  1 ^ rst $end
    $var wire 32 "! writeData [31:0] $end
    $var wire  5 W writeReg [4:0] $end
   $upscope $end
   $scope module m_ShiftLeftOne $end
    $var wire 32 O i [31:0] $end
    $var wire 32 F o [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


