$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 ] clk $end
  $var wire 32 _ r[0] [31:0] $end
  $var wire 32 i r[10] [31:0] $end
  $var wire 32 j r[11] [31:0] $end
  $var wire 32 k r[12] [31:0] $end
  $var wire 32 l r[13] [31:0] $end
  $var wire 32 m r[14] [31:0] $end
  $var wire 32 n r[15] [31:0] $end
  $var wire 32 o r[16] [31:0] $end
  $var wire 32 p r[17] [31:0] $end
  $var wire 32 q r[18] [31:0] $end
  $var wire 32 r r[19] [31:0] $end
  $var wire 32 ` r[1] [31:0] $end
  $var wire 32 s r[20] [31:0] $end
  $var wire 32 t r[21] [31:0] $end
  $var wire 32 u r[22] [31:0] $end
  $var wire 32 v r[23] [31:0] $end
  $var wire 32 w r[24] [31:0] $end
  $var wire 32 x r[25] [31:0] $end
  $var wire 32 y r[26] [31:0] $end
  $var wire 32 z r[27] [31:0] $end
  $var wire 32 { r[28] [31:0] $end
  $var wire 32 | r[29] [31:0] $end
  $var wire 32 a r[2] [31:0] $end
  $var wire 32 } r[30] [31:0] $end
  $var wire 32 ~ r[31] [31:0] $end
  $var wire 32 b r[3] [31:0] $end
  $var wire 32 c r[4] [31:0] $end
  $var wire 32 d r[5] [31:0] $end
  $var wire 32 e r[6] [31:0] $end
  $var wire 32 f r[7] [31:0] $end
  $var wire 32 g r[8] [31:0] $end
  $var wire 32 h r[9] [31:0] $end
  $var wire  1 ^ start $end
  $scope module SingleCycleCPU $end
   $var wire  2 N ALUOp [1:0] $end
   $var wire 32 [ ALUOut [31:0] $end
   $var wire  1 L ALUSrc $end
   $var wire 32 #! ReadData3 [31:0] $end
   $var wire 32 "! WriteData_mux_out [31:0] $end
   $var wire 32 G add2_sum [31:0] $end
   $var wire 32 Z alu_mux_out [31:0] $end
   $var wire  4 P aluctl [3:0] $end
   $var wire  1 H branch $end
   $var wire  1 ] clk $end
   $var wire 32 O imm [31:0] $end
   $var wire 32 E instruction [31:0] $end
   $var wire  1 I memRead $end
   $var wire  1 K memWrite $end
   $var wire  1 J memtoReg $end
   $var wire 32 D pc_add [31:0] $end
   $var wire 32 !! pc_mux_out [31:0] $end
   $var wire 32 C pc_o [31:0] $end
   $var wire 32 _ r[0] [31:0] $end
   $var wire 32 i r[10] [31:0] $end
   $var wire 32 j r[11] [31:0] $end
   $var wire 32 k r[12] [31:0] $end
   $var wire 32 l r[13] [31:0] $end
   $var wire 32 m r[14] [31:0] $end
   $var wire 32 n r[15] [31:0] $end
   $var wire 32 o r[16] [31:0] $end
   $var wire 32 p r[17] [31:0] $end
   $var wire 32 q r[18] [31:0] $end
   $var wire 32 r r[19] [31:0] $end
   $var wire 32 ` r[1] [31:0] $end
   $var wire 32 s r[20] [31:0] $end
   $var wire 32 t r[21] [31:0] $end
   $var wire 32 u r[22] [31:0] $end
   $var wire 32 v r[23] [31:0] $end
   $var wire 32 w r[24] [31:0] $end
   $var wire 32 x r[25] [31:0] $end
   $var wire 32 y r[26] [31:0] $end
   $var wire 32 z r[27] [31:0] $end
   $var wire 32 { r[28] [31:0] $end
   $var wire 32 | r[29] [31:0] $end
   $var wire 32 a r[2] [31:0] $end
   $var wire 32 } r[30] [31:0] $end
   $var wire 32 ~ r[31] [31:0] $end
   $var wire 32 b r[3] [31:0] $end
   $var wire 32 c r[4] [31:0] $end
   $var wire 32 d r[5] [31:0] $end
   $var wire 32 e r[6] [31:0] $end
   $var wire 32 f r[7] [31:0] $end
   $var wire 32 g r[8] [31:0] $end
   $var wire 32 h r[9] [31:0] $end
   $var wire 32 X readData1 [31:0] $end
   $var wire 32 Y readData2 [31:0] $end
   $var wire  1 M regWrite $end
   $var wire 32 F shift1_out [31:0] $end
   $var wire  1 ^ start $end
   $var wire  1 \ zero_ $end
   $scope module m_ALU $end
    $var wire 32 X A [31:0] $end
    $var wire 32 [ ALUOut [31:0] $end
    $var wire  4 P ALUctl [3:0] $end
    $var wire 32 Z B [31:0] $end
    $var wire  1 \ zero $end
   $upscope $end
   $scope module m_ALUCtrl $end
    $var wire  4 P ALUCtl [3:0] $end
    $var wire  2 N ALUOp [1:0] $end
    $var wire  3 R funct3 [2:0] $end
    $var wire  1 Q funct7 $end
   $upscope $end
   $scope module m_Adder_1 $end
    $var wire 32 C a [31:0] $end
    $var wire 32 %! b [31:0] $end
    $var wire 32 D sum [31:0] $end
   $upscope $end
   $scope module m_Adder_2 $end
    $var wire 32 C a [31:0] $end
    $var wire 32 F b [31:0] $end
    $var wire 32 G sum [31:0] $end
   $upscope $end
   $scope module m_Control $end
    $var wire  2 N ALUOp [1:0] $end
    $var wire  1 L ALUSrc $end
    $var wire  1 H branch $end
    $var wire  6 T control [5:0] $end
    $var wire  1 I memRead $end
    $var wire  1 K memWrite $end
    $var wire  1 J memtoReg $end
    $var wire  7 S opcode [6:0] $end
    $var wire  1 M regWrite $end
   $upscope $end
   $scope module m_DataMemory $end
    $var wire 32 [ address [31:0] $end
    $var wire  1 ] clk $end
    $var wire  1 I memRead $end
    $var wire  1 K memWrite $end
    $var wire 32 #! readData [31:0] $end
    $var wire  1 ^ rst $end
    $var wire 32 Y writeData [31:0] $end
   $upscope $end
   $scope module m_ImmGen $end
    $var wire 32 O imm [31:0] $end
    $var wire 32 E inst [31:0] $end
    $var wire  7 S opcode [6:0] $end
   $upscope $end
   $scope module m_InstMem $end
    $var wire 32 E inst [31:0] $end
    $var wire 32 C readAddr [31:0] $end
   $upscope $end
   $scope module m_Mux_ALU $end
    $var wire 32 Z out [31:0] $end
    $var wire 32 Y s0 [31:0] $end
    $var wire 32 O s1 [31:0] $end
    $var wire  1 L sel $end
    $var wire 32 &! size [31:0] $end
   $upscope $end
   $scope module m_Mux_PC $end
    $var wire 32 !! out [31:0] $end
    $var wire 32 D s0 [31:0] $end
    $var wire 32 G s1 [31:0] $end
    $var wire  1 $! sel $end
    $var wire 32 &! size [31:0] $end
   $upscope $end
   $scope module m_Mux_WriteData $end
    $var wire 32 "! out [31:0] $end
    $var wire 32 #! s0 [31:0] $end
    $var wire 32 [ s1 [31:0] $end
    $var wire  1 J sel $end
    $var wire 32 &! size [31:0] $end
   $upscope $end
   $scope module m_PC $end
    $var wire  1 ] clk $end
    $var wire 32 !! pc_i [31:0] $end
    $var wire 32 C pc_o [31:0] $end
    $var wire  1 ^ rst $end
   $upscope $end
   $scope module m_Register $end
    $var wire  1 ] clk $end
    $var wire 32 X readData1 [31:0] $end
    $var wire 32 Y readData2 [31:0] $end
    $var wire  5 U readReg1 [4:0] $end
    $var wire  5 V readReg2 [4:0] $end
    $var wire  1 M regWrite $end
    $var wire 32 # regs[0] [31:0] $end
    $var wire 32 - regs[10] [31:0] $end
    $var wire 32 . regs[11] [31:0] $end
    $var wire 32 / regs[12] [31:0] $end
    $var wire 32 0 regs[13] [31:0] $end
    $var wire 32 1 regs[14] [31:0] $end
    $var wire 32 2 regs[15] [31:0] $end
    $var wire 32 3 regs[16] [31:0] $end
    $var wire 32 4 regs[17] [31:0] $end
    $var wire 32 5 regs[18] [31:0] $end
    $var wire 32 6 regs[19] [31:0] $end
    $var wire 32 $ regs[1] [31:0] $end
    $var wire 32 7 regs[20] [31:0] $end
    $var wire 32 8 regs[21] [31:0] $end
    $var wire 32 9 regs[22] [31:0] $end
    $var wire 32 : regs[23] [31:0] $end
    $var wire 32 ; regs[24] [31:0] $end
    $var wire 32 < regs[25] [31:0] $end
    $var wire 32 = regs[26] [31:0] $end
    $var wire 32 > regs[27] [31:0] $end
    $var wire 32 ? regs[28] [31:0] $end
    $var wire 32 @ regs[29] [31:0] $end
    $var wire 32 % regs[2] [31:0] $end
    $var wire 32 A regs[30] [31:0] $end
    $var wire 32 B regs[31] [31:0] $end
    $var wire 32 & regs[3] [31:0] $end
    $var wire 32 ' regs[4] [31:0] $end
    $var wire 32 ( regs[5] [31:0] $end
    $var wire 32 ) regs[6] [31:0] $end
    $var wire 32 * regs[7] [31:0] $end
    $var wire 32 + regs[8] [31:0] $end
    $var wire 32 , regs[9] [31:0] $end
    $var wire  1 ^ rst $end
    $var wire 32 "! writeData [31:0] $end
    $var wire  5 W writeReg [4:0] $end
   $upscope $end
   $scope module m_ShiftLeftOne $end
    $var wire 32 O i [31:0] $end
    $var wire 32 F o [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000100 D
b00000110010000000000010100010011 E
b00000000000000000000000011001000 F
b00000000000000000000000011001000 G
0H
1I
1J
0K
1L
1M
b00 N
b00000000000000000000000001100100 O
b0010 P
0Q
b000 R
b0010011 S
b111100 T
b00000 U
b00100 V
b01010 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000001100100 Z
b00000000000000000000000001100100 [
0\
0]
1^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000100 !!
b00000000000000000000000001100100 "!
b00000000000000000000000000000000 #!
0$!
b00000000000000000000000000000100 %!
b00000000000000000000000000100000 &!
#1
b00000000000000000000000010000000 %
b00000000000000000000000000000100 C
b00000000000000000000000000001000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000100 G
0I
0J
0L
0M
b00000000000000000000000000000000 O
b0000000 S
b000000 T
b00000 V
b00000 W
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
1\
1]
0^
b00000000000000000000000010000000 a
b00000000000000000000000000001000 !!
b00000000000000000000000000000000 "!
#2
0]
1^
#3
b00000000000000000000000000000000 C
b00000000000000000000000000000100 D
b00000110010000000000010100010011 E
b00000000000000000000000011001000 F
b00000000000000000000000011001000 G
1I
1J
1L
1M
b00000000000000000000000001100100 O
b0010011 S
b111100 T
b00100 V
b01010 W
b00000000000000000000000001100100 Z
b00000000000000000000000001100100 [
0\
1]
b00000000000000000000000000000100 !!
b00000000000000000000000001100100 "!
#4
b00000000000000000000000001100100 -
0]
b00000000000000000000000001100100 i
#5
1]
#6
0]
#7
1]
#8
0]
#9
1]
#10
0]
#11
1]
#12
0]
#13
1]
#14
0]
#15
1]
#16
0]
#17
1]
#18
0]
#19
1]
#20
0]
#21
1]
#22
0]
#23
1]
#24
0]
#25
1]
#26
0]
#27
1]
#28
0]
#29
1]
#30
0]
#31
1]
#32
0]
#33
1]
#34
0]
#35
1]
#36
0]
#37
1]
#38
0]
#39
1]
#40
0]
#41
1]
#42
0]
#43
1]
#44
0]
#45
1]
#46
0]
#47
1]
#48
0]
#49
1]
#50
0]
#51
1]
#52
0]
#53
1]
#54
0]
#55
1]
#56
0]
#57
1]
#58
0]
#59
1]
#60
0]
#61
1]
#62
0]
#63
1]
#64
0]
#65
1]
#66
0]
#67
1]
#68
0]
#69
1]
#70
0]
#71
1]
#72
0]
#73
1]
#74
0]
#75
1]
#76
0]
#77
1]
#78
0]
#79
1]
#80
0]
#81
1]
#82
0]
#83
1]
#84
0]
#85
1]
#86
0]
#87
1]
#88
0]
#89
1]
#90
0]
#91
1]
#92
0]
#93
1]
#94
0]
#95
1]
#96
0]
#97
1]
#98
0]
#99
1]
#100
0]
#101
1]
#102
0]
#103
1]
#104
